// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package newsgrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetNewsPieceRequest struct {
	// Идентификатор новости.
	NewsID               string   `protobuf:"bytes,1,opt,name=newsID,proto3" json:"newsID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNewsPieceRequest) Reset()         { *m = GetNewsPieceRequest{} }
func (m *GetNewsPieceRequest) String() string { return proto.CompactTextString(m) }
func (*GetNewsPieceRequest) ProtoMessage()    {}
func (*GetNewsPieceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *GetNewsPieceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNewsPieceRequest.Unmarshal(m, b)
}
func (m *GetNewsPieceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNewsPieceRequest.Marshal(b, m, deterministic)
}
func (m *GetNewsPieceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNewsPieceRequest.Merge(m, src)
}
func (m *GetNewsPieceRequest) XXX_Size() int {
	return xxx_messageInfo_GetNewsPieceRequest.Size(m)
}
func (m *GetNewsPieceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNewsPieceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNewsPieceRequest proto.InternalMessageInfo

func (m *GetNewsPieceRequest) GetNewsID() string {
	if m != nil {
		return m.NewsID
	}
	return ""
}

type GetNewsPieceReply struct {
	// Код ошибки. Если ошибки нет, код равен 0.
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// Заголовок новости.
	Header string `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// Unix время создания.
	Date                 int64    `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNewsPieceReply) Reset()         { *m = GetNewsPieceReply{} }
func (m *GetNewsPieceReply) String() string { return proto.CompactTextString(m) }
func (*GetNewsPieceReply) ProtoMessage()    {}
func (*GetNewsPieceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *GetNewsPieceReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNewsPieceReply.Unmarshal(m, b)
}
func (m *GetNewsPieceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNewsPieceReply.Marshal(b, m, deterministic)
}
func (m *GetNewsPieceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNewsPieceReply.Merge(m, src)
}
func (m *GetNewsPieceReply) XXX_Size() int {
	return xxx_messageInfo_GetNewsPieceReply.Size(m)
}
func (m *GetNewsPieceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNewsPieceReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetNewsPieceReply proto.InternalMessageInfo

func (m *GetNewsPieceReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetNewsPieceReply) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

func (m *GetNewsPieceReply) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func init() {
	proto.RegisterType((*GetNewsPieceRequest)(nil), "newsgrpc.GetNewsPieceRequest")
	proto.RegisterType((*GetNewsPieceReply)(nil), "newsgrpc.GetNewsPieceReply")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xc8, 0x4b, 0x2d, 0x2f, 0x4e, 0x2f, 0x2a, 0x48, 0x56,
	0xd2, 0xe5, 0x12, 0x76, 0x4f, 0x2d, 0xf1, 0x4b, 0x2d, 0x2f, 0x0e, 0xc8, 0x4c, 0x4d, 0x4e, 0x0d,
	0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe3, 0x62, 0x03, 0x29, 0xf1, 0x74, 0x91, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf2, 0x94, 0xe2, 0xb8, 0x04, 0x51, 0x95, 0x17, 0xe4, 0x54,
	0x0a, 0xc9, 0x72, 0x71, 0xa5, 0x16, 0x15, 0xe5, 0x17, 0xc5, 0x27, 0xe7, 0xa7, 0xa4, 0x82, 0x35,
	0xb0, 0x06, 0x71, 0x82, 0x45, 0x9c, 0xf3, 0x53, 0x52, 0x41, 0x66, 0x65, 0xa4, 0x26, 0xa6, 0xa4,
	0x16, 0x49, 0x30, 0x41, 0xcc, 0x82, 0xf0, 0x84, 0x84, 0xb8, 0x58, 0x52, 0x12, 0x4b, 0x52, 0x25,
	0x98, 0x15, 0x18, 0x35, 0x98, 0x83, 0xc0, 0x6c, 0xa3, 0x20, 0x2e, 0x16, 0x90, 0xe1, 0x42, 0x5e,
	0x5c, 0x3c, 0xc8, 0xf6, 0x08, 0xc9, 0xea, 0xc1, 0x5c, 0xac, 0x87, 0xc5, 0xb9, 0x52, 0xd2, 0xb8,
	0xa4, 0x0b, 0x72, 0x2a, 0x93, 0xd8, 0xc0, 0x7e, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa5,
	0x3d, 0xf7, 0x13, 0x00, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NewsClient is the client API for News service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NewsClient interface {
	// GetNewsPiece возвращает статью.
	//
	// Коды ошибок:
	// 1 — внутренняя ошибка;
	GetNewsPiece(ctx context.Context, in *GetNewsPieceRequest, opts ...grpc.CallOption) (*GetNewsPieceReply, error)
}

type newsClient struct {
	cc *grpc.ClientConn
}

func NewNewsClient(cc *grpc.ClientConn) NewsClient {
	return &newsClient{cc}
}

func (c *newsClient) GetNewsPiece(ctx context.Context, in *GetNewsPieceRequest, opts ...grpc.CallOption) (*GetNewsPieceReply, error) {
	out := new(GetNewsPieceReply)
	err := c.cc.Invoke(ctx, "/newsgrpc.News/GetNewsPiece", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsServer is the server API for News service.
type NewsServer interface {
	// GetNewsPiece возвращает статью.
	//
	// Коды ошибок:
	// 1 — внутренняя ошибка;
	GetNewsPiece(context.Context, *GetNewsPieceRequest) (*GetNewsPieceReply, error)
}

func RegisterNewsServer(s *grpc.Server, srv NewsServer) {
	s.RegisterService(&_News_serviceDesc, srv)
}

func _News_GetNewsPiece_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewsPieceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetNewsPiece(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/newsgrpc.News/GetNewsPiece",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetNewsPiece(ctx, req.(*GetNewsPieceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _News_serviceDesc = grpc.ServiceDesc{
	ServiceName: "newsgrpc.News",
	HandlerType: (*NewsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNewsPiece",
			Handler:    _News_GetNewsPiece_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
